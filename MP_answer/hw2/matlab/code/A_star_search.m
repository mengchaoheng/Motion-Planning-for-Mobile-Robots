function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=Inf*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LIST STRUCTURE
    %--------------------------------------------------------------------------
    % X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    CLOSE=[];

    %add the start node to OPEN
    xNode=xStart;
    yNode=yStart;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN=[OPEN;[xNode yNode xNode yNode goal_distance path_cost goal_distance+path_cost]];
    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while(1) %you have to dicide the Conditions for while loop exit
     
     % current onde is the node in OPEN list with the lowest f_cost
     if(isempty(OPEN))
        break;
     end
     [~,current_index] = min(OPEN(:,end));
     current=OPEN(current_index,:);
     %remove current from OPEN, and add to CLOSE
     OPEN(current_index,:)=[];% remove current from OPEN
     CLOSE=[CLOSE;current];% add to CLOSE
     
     % path has been found, loop exit
     if(MAP(current(1),current(2))==0)
         NoPath=0;
         break;
     end
     
     % foreach neighbour of the current node
     for k= 1:-1:-1
        for j= 1:-1:-1  %The order can be customized
            if (k~=j || k~=0)  %The current node itself is not its neighbour, k==j && k==0 meanning itself
                s_x = current(1)+k;
                s_y = current(2)+j;
                %if neighbour is not traversable or is in CLOSE, skip to next.
                if( s_x <=0 || s_x >MAX_X || s_y <=0 || s_y >MAX_Y || MAP(s_x,s_y)==-1 || ismember([s_x s_y],CLOSE(:,1:2),'row'))
                    continue;
                end
                %distance between node and goal,hn
                hn = distance(xTarget,yTarget,s_x,s_y);
                %cost of travelling to node£¬gn
                gn = current(end-1)+distance(current(1),current(2),s_x,s_y);
                %fn
                fn = hn+gn;
                [li,loc]=ismember([s_x s_y],OPEN(:,1:2),'row');
                if(~li)% if neighbour not in OPEN 
                    % add to OPEN
                    OPEN=[OPEN;[s_x s_y current(1) current(2) hn gn fn]];
                elseif(OPEN(loc,end)>fn) % new path to neighbour is shorter
                    % update cost
                    OPEN(loc,:)=[s_x s_y current(1) current(2) hn gn fn];
                end 
            end%End of if node is not its own successor loop
        end%End of j for loop
    end%End of k for loop   
     %
     %finish the while loop
     %
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    path=[];
    if(~NoPath)
        xNode=xTarget;
        yNode=yTarget;
        while(1)
            [li,loc]=ismember([xNode yNode],CLOSE(:,1:2),'row');
            if(li)
                path=[CLOSE(loc,1:2);path];
                xNode=CLOSE(loc,3);
                yNode=CLOSE(loc,4);
            else % error
                break;
            end
            if(MAP(xNode,yNode)==1) % find the start point
                path=[[xStart yStart];path];
                break;
            end
        end
   end  
end
